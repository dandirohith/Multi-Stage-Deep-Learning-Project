# -*- coding: utf-8 -*-
"""CCpp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17vEpDnU9mAEErlVRgSMrtaBIRUNnduZx
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.utils import plot_model
import tensorflow as tf
import seaborn as sns

df = pd.read_excel("Folds5x2_pp.xlsx")
y = df["PE"]
X = df.drop("PE", axis = 1)
df.tail()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, shuffle=False)
print(X_train.shape, y_train.shape,y_test.shape)
scaler = MinMaxScaler((-0.9, 0.9))
X_train_scaled = scaler.fit_transform(X_train.astype(np.float64))
X_test_scaled = scaler.fit_transform(X_test.astype(np.float64))
y_train_reshaped = y_train.to_numpy().reshape(-1, 1)
y_test_reshaped = y_test.to_numpy().reshape(-1, 1)
y_train_scaled = scaler.fit_transform(y_train_reshaped)
y_test_scaled = scaler.transform(y_test_reshaped)

tf.random.set_seed(42)
reg_val = 0.1

model1 = tf.keras.models.Sequential([
    tf.keras.layers.Flatten(input_shape=(4,)),
    tf.keras.layers.Dense(28, activation='tanh',
                          kernel_regularizer=tf.keras.regularizers.l2(reg_val),
                          bias_regularizer=tf.keras.regularizers.l2(reg_val)),
    tf.keras.layers.Dense(16, activation='tanh',
                          kernel_regularizer=tf.keras.regularizers.l2(reg_val),
                          bias_regularizer=tf.keras.regularizers.l2(reg_val)),
    tf.keras.layers.Dense(10, activation='tanh',
                          kernel_regularizer=tf.keras.regularizers.l2(reg_val),
                          bias_regularizer=tf.keras.regularizers.l2(reg_val)),
    tf.keras.layers.Dense(1)
])

model1.compile(loss=tf.keras.losses.mae,
              optimizer=tf.keras.optimizers.SGD(learning_rate=0.001),
              metrics=['mae'])

model1.fit(X_train_scaled, y_train, batch_size=64, epochs=500, validation_split=0.2)


print(model1.summary())
plot_model(model1, to_file='model_plot.png', show_shapes=True, show_layer_names=True)
img = plt.imread('model_plot.png')
plt.imshow(img)
plt.show()
test_loss = model1.evaluate(X_test, y_test)
print(test_loss)